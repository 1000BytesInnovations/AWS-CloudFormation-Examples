AWSTemplateFormatVersion: '2010-09-09'  
Transform: AWS::Serverless-2016-10-31  
Description: An AWS Serverless Specification template describing a Lambda function to convert JSON to Parquet.

Parameters:  
  # Parameters to customize the resources
  TopicNamePlaceholder:
    Description: Name for the SNS topic
    Type: String
  FunctionNamePlaceholder:
    Description: Name for the Lambda function
    Type: String
  BucketNamePlaceholder:
    Description: Name for the S3 bucket
    Type: String
  PrefixPlaceholder:
    Description: Prefix for the S3 key filter
    Type: String
  SuffixPlaceholder:
    Description: Suffix for the S3 key filter
    Type: String
    Default: .json
  RoleArnPlaceholder:
    Description: ARN of the IAM role
    Type: String
  EmailPlaceholder:
    Description: Email for the SNS topic
    Type: String

Resources:  
  # Define AWS resources
  SNSTopic:
    Type: AWS::SNS::Topic  
    Properties:  
      # SNS Topic Properties
      TopicName: !Ref TopicNamePlaceholder  
      Subscription:  
      - Endpoint: !Ref EmailPlaceholder  
        Protocol: "email"  

  LambdaFunction:
    Type: AWS::Serverless::Function  
    Properties:  
      # Lambda Function Properties
      Layers:  
      - "arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python312:4"
      Description: A Lambda function that converts a JSON file to a Parquet file.  
      MemorySize: 512  
      Timeout: 15
      FunctionName: !Ref FunctionNamePlaceholder  
      Handler: index.convert_json_to_parquet  
      Runtime: python3.12  
      Role: !Ref RoleArnPlaceholder  

      InlineCode: |  # Lambda Function Code
        import json
        import pandas as pd
        import boto3
        from io import BytesIO

        # Function to convert JSON to Parquet
        def convert_json_to_parquet(event, context):  
          s3 = boto3.client('s3')  
          bucket_name = event['Records'][0]['s3']['bucket']['name']  
          json_file_key = event['Records'][0]['s3']['object']['key']  
          response = s3.get_object(Bucket=bucket_name, Key=json_file_key)  
          json_content = response['Body'].read()  
          json_data = json.loads(json_content)  
          df = pd.DataFrame(json_data)  
          parquet_buffer = BytesIO()  
          df.to_parquet(parquet_buffer, index=False)  
          parquet_file_key = json_file_key.rsplit('.', 1)[0] + '.parquet'  
          s3.put_object(Bucket=bucket_name, Key=parquet_file_key, Body=parquet_buffer.getvalue())  
      EventInvokeConfig:  
        DestinationConfig:  
          OnFailure:  
            Type: SNS  
            Destination: !GetAtt SNSTopic.TopicArn  
          OnSuccess:  
            Type: SNS  
            Destination: !GetAtt SNSTopic.TopicArn  
      Events:  
        S3Event:  
          Type: S3  
          Properties:  
            Bucket: !Ref S3Bucket  
            Events: s3:ObjectCreated:Put  
            Filter:  
              S3Key:  
                Rules:  
                  - Name: prefix  
                    Value: !Ref PrefixPlaceholder  
                  - Name: suffix  
                    Value: !Ref SuffixPlaceholder  

  S3Bucket:
    Type: AWS::S3::Bucket  
    Properties:  
      # S3 Bucket Properties
      BucketName: !Ref BucketNamePlaceholder  

Outputs:  
  # Output ARNs and Names
  TopicArn:
    Description: ARN of the SNS topic  
    Value: !Ref SNSTopic  
  BucketName:
    Description: Name of the S3 bucket  
    Value: !Ref S3Bucket  
